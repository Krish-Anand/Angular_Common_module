{
    "input":
    {
        "html":"<input #box matInput value=''/>",
        "bootstraphtml":"<input #box  class='form-control-lg' value=''/>",
        "tag":"input",
        "event":
        {           
            "keyup": "(keyup)='onKey(box.value)'",
            "keyupenter": "(keyup.enter)='onKeyEnter(box.value)'",
            "blur": "(blur)='onBlur(box.value)'",
            "change": "(change)='onChange(box.value)'",
            "keypress": "(keypress)='restrictNumeric($event)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled",
            "placeholder": "Please enter the value",
            "number":"type='text'",
            "maxlength":"maxlength='9'",
            "minlength":"minlength='3'",
            "email":"pattern='[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$'"
        },
        "unittest":
        {
            "keyup": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled(); }) })",

            "keyupenter": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKeyEnter'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyupenter();  tick(); expect(component.onKeyEnter).toHaveBeenCalled(); }) })",

            "blur": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onBlur'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.blur(); tick(); expect(component.onBlur).toHaveBeenCalled(); }) })",

            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })",

            "keypress": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKeyPress'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyupress();  tick(); expect(component.onKeyPress).toHaveBeenCalled(); }) })"

        },
        "ts":
        {
            "keyup":"onKey(boxvalue:string){console.log('onKey = ' + boxvalue);}",
            "keyupenter":"onKeyEnter(boxvalue:string){console.log('onKeyEnter = ' +boxvalue);}",
            "blur":"onBlur(boxvalue:string){console.log('onBlur = ' +boxvalue);}",
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}",
            "keypress": "restrictNumeric(e){var data; var regex=/[\\d\\s]/;if(e.metaKey || e.ctrlKey){return true;} if(e.which === 0){return true;} if(e.which<33){return true;}data=String.fromCharCode(e.which);return e.target.value.length < 8!! && regex.test(data);}"
        }
    },
    "slidder":
    {
        "html":"<mat-slider [disabled]='disabled' [invert]='invert' [max]='max' [min]='min' [step]='step' [thumbLabel]='thumbLabel' [(ngModel)]='value' [vertical]='vertical' aria-labelledby='example-name-label'> </mat-slider>",
        "bootstraphtml":"<input type='range' #range [disabled]='disabled' [max]='max' [min]='min' [step]='step' [(ngModel)]='value'/>",
        "tag":"mat-slider",
        "bootstraptag":"input",
        "event":
        {
            "tickInterval": "[tickInterval]='getSliderTickInterval()'"           
        },
        "validation":
        {
            "required": "required",
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "tickInterval": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "basic":"autoTicks = false;disabled = false;invert = false;max = 100;min = 0;showTicks = false;step = 1;thumbLabel = false;value = 0;vertical = false;tickInterval = 1;",
            "tickInterval":"getSliderTickInterval(): number | 'auto' {if (this.showTicks) {return this.autoTicks ? 'auto' : this.tickInterval;}return 0;}"
        }
    },
    "slidetoggle":
    {
        "html":"<mat-slide-toggle [checked] = 'checked' [disabled] = 'disabled'>Slide!</mat-slide-toggle>",
        "bootstraphtml":"<div class='o-switch btn-group' data-toggle='buttons' role='group'><label class='btn btn-secondary active'><input type='radio' name='options' id='option1' autocomplete='off' checked> 1</label><label class='btn btn-secondary'><input type='radio' name='options' id='option2' autocomplete='off'>2</label><label class='btn btn-secondary'><input type='radio' name='options' id='option3' autocomplete='off'>3</label></div>",
        "tag":"mat-slide-toggle",
        "bootstraptag":"div",
        "event":
        {          
            "input": "onInputChange($event)"
        },
        "validation":
        {
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "input": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "input":"onInputChange(event: MatSliderChange) {console.log(event.value);}"
        }
    }, 
    "table":
    {
        "html":"<table mat-table [dataSource]='dataSource' class='mat-elevation-z8'>",
        "bootstraphtml":"<table class='table table-bordered'>",
        "tag":"table",
        "column":"<ng-container matColumnDef='column'><th mat-header-cell *matHeaderCellDef mat-sort-header>Column1</th><td mat-cell *matCellDef='let element'> {{element.column1}} </td></ng-container>",
        "bootstrapcolumn":"<tableclass='table table-bordered'><thead><tr><thscope='col'>#</th><thscope='col'>First</th><thscope='col'>Last</th></tr></thead><tbody><tr><thscope='row'><select><optionvalue='1'>1</option><optionvalue='2'>2</option><optionvalue='3'>3</option><optionvalue='4'>4</option></select></th><td><labelfor='name'>Enter Username</label></td><td><inputtype='text'name='username'class='form-control'></td></tr><tr><thscope='row'><select><optionvalue='1'>1</option><optionvalue='2'>2</option><optionvalue='3'>3</option><optionvalue='4'>4</option></select></th><td><labelfor='name'>Enter Password</label></td><td><inputtype='password'name='username'class='form-control'></td></tr><tr><thscope='row'><select><optionvalue='1'>1</option><optionvalue='2'>2</option><optionvalue='3'>3</option><optionvalue='4'>4</option></select></th><td><labelfor='gender'>Gender</label></td><td><divclass='form-check'><inputclass='form-check-input'type='radio'name='exampleRadios'checked><labelclass='form-check-label'for='exampleRadios1'>Male</label></div><divclass='form-check'><inputclass='form-check-input'type='radio'name='exampleRadios'><labelclass='form-check-label'for='exampleRadios2'>Female</label></div></td></tr><tr><thscope='row'><select><optionvalue='1'>1</option><optionvalue='2'>2</option><optionvalue='3'>3</option><optionvalue='4'>4</option></select></th><td><ul><li>Admin</li><li>User</li><li>DBA</li></ul></td><td><buttontype='button'>Save</button></td></tbody></table>",
        "event":
        {          
            "sort": "matSort",
            "singleclick": "(click)='singleClick(row)'"
        },
        "validation":
        {
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "input": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "singleclick": "singleClick(row) { console.log(row);}",
            "input":"onInputChange(event: MatSliderChange) {console.log(event.value);}"
        }
    },
    "datepicker":
    {
        "html":"<mat-form-field appearance='fill'><mat-label>Choose a date</mat-label><input matInput [matDatepicker]='picker'><mat-datepicker-toggle matSuffix [for]='picker'></mat-datepicker-toggle><mat-datepicker #picker></mat-datepicker></mat-form-field>",
        "bootstraphtml":"<form class='form-inline'> <div class='form-group'><div class='input-group'> <input class='form-control' placeholder='yyyy-mm-dd' name='dp'  ngbDatepicker #d='ngbDatepicker'> <div class='input-group-append'> <button class='btn btn-outline-secondary calendar' (click)='d.toggle()' type='button'></button>",
        "tag":"mat-form-field",
        "bootstraptag":"form",
        "event":
        {          
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest":
        {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-form-field')); input.nativeElement.change();  tick(); expect(component.onChange).toHaveBeenCalled();)"
        },
        "ts":
        {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    },
    "dialog":
    {
        "html":"<button mat-raised-button'>Pick one</button>",
        "bootstraphtml":"<button type='button' class='btn btn-info btn-lg' (click)='openModal()'>Click to Open</button><div class='modal' tabindex='-1' role='dialog'  [ngStyle]='{​​​​​​​​display:display}​​​​​​​​'><div class='modal-dialog' role='document'><div class='modal-content'><div class='modal-header'><h4 class='modal-title'>Model Title</h4><button type='button' class='close' aria-label='Close' (click)='onCloseHandled()'><span aria-hidden='true'>&times;</span></button></div><div class='modal-body'><p>Model body text</p></div><div class='modal-footer'><button type='button' class='btn btn-default' (click)='onCloseHandled()' >Close</button></div></div></div></div>",
        "tag":"button",
        "bootstraptag":"button",
        "event":
        {          
            "click": "(click)='openDialog()'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest":
        {
            "click": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'openDialog'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('button')); input.nativeElement.click();  tick(); expect(component.openDialog).toHaveBeenCalled();)"
        },
        "ts":
        {
            "click":"let dialogRef = dialog.open(AppComponent, { height: '400px',width: '600px',});dialogRef.afterClosed().subscribe(result => {console.log('Dialog result:' result);});dialogRef.close('');"
        }
    },
    "progressbar":
    {
        "html":"<mat-progress-bar></mat-progress-bar>",
        "bootstraphtml":"<div class='progress'><div class='progress-bar' role='progress-bar' style='width: 25%' aria-valuenow='25' aria-valuemin='0' aria-valuemax='100'>25%</div></div>",
        "tag":"mat-progress-bar",
        "bootstraptag":"div",
        "event":
        {          
            "determinate": "mode='determinate' value='40'",
            "indeterminate": "mode='indeterminate'",
            "buffer": "mode='buffer'",
            "query": "mode='query'"
        },
        "validation":
        {
            "none": ""
        },
        "unittest":
        {
            "determinate": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance; expect(progressComponent.value).toBe(40); expect(progressComponent.mode).toBe('determinate');",
            "indeterminate": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance;  expect(progressComponent.mode).toBe('indeterminate');",
            "buffer": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance;  expect(progressComponent.mode).toBe('buffer');",
            "query": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance;  expect(progressComponent.mode).toBe('query');"
        },
        "ts":
        {
            "determinate":"",
            "indeterminate":"",
            "buffer":""
        }
    },
    "select": {
        "html": "<select id='selectid'><option value=''></option></select>",
        "bootstrapselect":"<select id='selectid' class='form-select' [multiple]='multiple' [arialabel]='arialabel'><option value=''></option></select>",
        "tag":"select",
        "event": {
            "change": "(change)='onChangeSelect($event.target.value)'"
        },
        "validation": {
            "required": "required"
        },
        "ts":
        {
            "change":"onChangeSelect(selectedValue: string){console.log('onChange = ' +selectedValue);}"
        },
        "unittest": {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChangeSelect'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('select')); input.nativeElement.change(); tick(); expect(component.onChangeSelect).toHaveBeenCalled(); }) })"
        }
    },
    "button": {
        "html": "<mat-button color='primary' outline='true'>Primary Button</mat-button>",
        "bootstraphtml":"<button class='btn btn-primary'>Primary Button</button>",
        "tag":"mat-button",
        "event": {
            "click": "(click)='eventClick('form values')'"
        },
        "validation": {
            "disabled": "disabled"
        },
        "unittest": {
            "click": "it('should be button identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'eventClick'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-button')); input.nativeElement.click(); tick(); expect(component.eventClick).toHaveBeenCalled(); }) })"
        },
        "ts": {
            "click": "eventClick(getForm: string) {console.log(getForm);}"
        }
    },
    "buttontoggle": {
        "html": "<mat-button-toggle-group>  </mat-button-toggle-group>",
        "bootstraphtml":"<div class='btn-group' role='group'> <button type='button' class='btn btn-secondary'>Left</button> <button type='button' class='btn btn-secondary'>Middle</button><button type='button' class='btn btn-secondary'>Right</button></div>",
        "tag":"mat-button-toggle-group",
        "event": {
            "change": "(change)='onChange($event.target.value)'"
        },
        "validation": {
            "disabled": "disabled"
        },
        "ts": {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
            },
        "unittest": {
            "change": "it('should be button toggle identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-button-toggle-group')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        }
    },
    "checkbox":{
        "html":"<input #box matInput value='' type='checkbox'/>",
        "bootstraphtml":"<input #box value='' type='checkbox' [checked]='checked'/>",
        "tag":"input",
        "event": {
        "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "ts": {
        "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        },
        "unittest": {
        "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        }
    },
    "radio":{
        "html":"<input #box matInput value='' type='radio'/>",
        "bootstraphtml":"<input #box value='' type='radio' [checked]='checked'/>",
        "tag":"input",
        "event": {
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        },
        "ts": {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    }
}
