{
    "input":
    {
        "html":"<input #box matInput value=''/>",
        "tag":"input",
        "event":
        {           
            "keyup": "(keyup)='onKey(box.value)'",
            "keyupenter": "(keyup.enter)='onKeyEnter(box.value)'",
            "blur": "(blur)='onBlur(box.value)'",
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled",
            "placeholder": "Please enter the value",
            "number":"type='number'",
            "maxlength":"maxlength='9'",
            "minlength":"minlength='3'",
            "email":"pattern='[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$'"
        },
        "unittest":
        {
            "keyup": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled(); }) })",

            "keyupenter": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKeyEnter'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyupenter();  tick(); expect(component.onKeyEnter).toHaveBeenCalled(); }) })",

            "blur": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onBlur'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.blur(); tick(); expect(component.onBlur).toHaveBeenCalled(); }) })",

            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        },
        "ts":
        {
            "keyup":"onKey(boxvalue:string){console.log('onKey = ' + boxvalue);}",
            "keyupenter":"onKeyEnter(boxvalue:string){console.log('onKeyEnter = ' +boxvalue);}",
            "blur":"onBlur(boxvalue:string){console.log('onBlur = ' +boxvalue);}",
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    },
    "slidder":
    {
        "html":"<mat-slider [disabled]='disabled' [invert]='invert' [max]='max' [min]='min' [step]='step' [thumbLabel]='thumbLabel' [(ngModel)]='value' [vertical]='vertical' aria-labelledby='example-name-label'> </mat-slider>",
        "tag":"mat-slider",
        "event":
        {
            "tickInterval": "[tickInterval]='getSliderTickInterval()'"           
        },
        "validation":
        {
            "required": "required",
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "tickInterval": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "basic":"autoTicks = false;disabled = false;invert = false;max = 100;min = 0;showTicks = false;step = 1;thumbLabel = false;value = 0;vertical = false;tickInterval = 1;",
            "tickInterval":"getSliderTickInterval(): number | 'auto' {if (this.showTicks) {return this.autoTicks ? 'auto' : this.tickInterval;}return 0;}"
        }
    },
    "slidetoggle":
    {
        "html":"<mat-slide-toggle [checked] = 'checked' [disabled] = 'disabled'>Slide!</mat-slide-toggle>",
        "tag":"mat-slide-toggle",
        "event":
        {          
            "input": "onInputChange($event)"
        },
        "validation":
        {
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "input": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "input":"onInputChange(event: MatSliderChange) {console.log(event.value);}"
        }
    }, 
    "table":
    {
        "html":"<table mat-table [dataSource]='dataSource' class='mat-elevation-z8'>",
        "tag":"table",
        "column":"<ng-container matColumnDef='column'><th mat-header-cell *matHeaderCellDef mat-sort-header>Column1</th><td mat-cell *matCellDef='let element'> {{element.column1}} </td></ng-container>",
        "event":
        {          
            "sort": "matSort",
            "singleclick": "(click)='singleClick(row)'"
        },
        "validation":
        {
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "input": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "singleclick": "singleClick(row) { console.log(row);}",
            "input":"onInputChange(event: MatSliderChange) {console.log(event.value);}"
        }
    },
    "datepicker":
    {
        "html":"<mat-form-field appearance='fill'><mat-label>Choose a date</mat-label><input matInput [matDatepicker]='picker'><mat-datepicker-toggle matSuffix [for]='picker'></mat-datepicker-toggle><mat-datepicker #picker></mat-datepicker></mat-form-field>",
        "tag":"mat-form-field",
        "event":
        {          
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest":
        {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    },
    "dialog":
    {
        "html":"<button mat-raised-button'>Pick one</button>",
        "tag":"button",
        "event":
        {          
            "click": "(click)='openDialog()'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest":
        {
            "click": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "click":"let dialogRef = dialog.open(AppComponent, { height: '400px',width: '600px',});dialogRef.afterClosed().subscribe(result => {console.log('Dialog result:' result);});dialogRef.close('');"
        }
    },
    "progressbar":
    {
        "html":"<mat-progress-bar></mat-progress-bar>",
        "tag":"mat-progress-bar",
        "event":
        {          
            "determinate": "mode='determinate' value='40'",
            "indeterminate": "mode='indeterminate'",
            "buffer": "mode='buffer'"
        },
        "validation":
        {
            "none": ""
        },
        "unittest":
        {
            "determinate": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)",
            "indeterminate": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)",
            "buffer": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "determinate":"",
            "indeterminate":"",
            "buffer":""
        }
    },
    "select": {
        "html": "<select id='selectid'><option value=''></option></select>",
        "tag":"select",
        "event": {
            "change": "(change)='onChangeSelect($event.target.value)'"
        },
        "validation": {
            "required": "required"
        },
        "ts":
        {
            "change":"onChangeSelect(selectedValue: string){console.log('onChange = ' +selectedValue);}"
        },
        "unittest": {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChangeSelect'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('select')); input.nativeElement.change(); tick(); expect(component.onChangeSelect).toHaveBeenCalled(); }) })"
        }
    },
    "button": {
        "html": "<mat-button color='primary' outline='true'>Primary Button</mat-button>",
        "tag":"mat-button",
        "event": {
            "click": "(click)='eventClick('form values')'"
        },
        "validation": {
            "disabled": "disabled"
        },
        "unittest": {
            "click": "it('should be button identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'eventClick'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-button')); input.nativeElement.click(); tick(); expect(component.eventClick).toHaveBeenCalled(); }) })"
        },
        "ts": {
            "click": "eventClick(getForm: string) {console.log(getForm);}"
        }
    },
    "buttontoggle": {
        "html": "<mat-button-toggle-group>  </mat-button-toggle-group>",
        "tag":"mat-button-toggle-group",
        "event": {
            "change": "(change)='onChange($event.target.value)'"
        },
        "validation": {
            "disabled": "disabled"
        },
        "ts": {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
            },
        "unittest": {
            "change": "it('should be button toggle identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-button-toggle-group')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        }
    },
    "checkbox":{
        "html":"<input #box matInput value='' type='checkbox'/>",
        "tag":"input",
        "event": {
        "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "ts": {
        "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        },
        "unittest": {
        "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        }
    },
    "radio":{
        "html":"<input #box matInput value='' type='radio'/>",
        "tag":"input",
        "event": {
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        },
        "ts": {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    }
}
